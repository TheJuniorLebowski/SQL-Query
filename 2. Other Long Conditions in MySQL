

1. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically. Table name is Station
    
    SELECT s.CITY, LENGTH(s.CITY) from Station s ORDER BY LENGTH(s.CITY) DESC, s.CITY ASC LIMIT 1;
    SELECT s.CITY, LENGTH(s.CITY) from Station s ORDER BY LENGTH(s.CITY) ASC, s.CITY ASC LIMIT 1;

2. Query the list of CITY names from STATION table starting with vowels (i.e., a, e, i, o, or u) from table Your result cannot contain duplicates.
            
            SELECT DISTINCT(CITY) FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]';
            
3. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
            
            SELECT DISTINCT(CITY) FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' OR CITY NOT REGEXP '[aeiouAEIOU]$';



4. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the STation table.
           
           SELECT COUNT(CITY)- COUNT(DISTINCT(CITY)) from STATION;


5. Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or 
more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.


                SELECT NAME from STUDENTS WHERE Marks > 75 ORDER BY RIGHT(NAME, 3) ASC, ID ASC;


6. Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2k per month
who have been employees for less than 10 months. Sort your result by ascending employee_id.

            SELECT name from Employee WHERE salary > 2000 AND months < 10 ORDER by employee_id ASC;


7. I have MYSQL table with three columns- name, salary, months. We define an employee's total earnings to be their monthly salary * months worked, and
the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for
all employees as well as the total number of employees who have maximum total earnings. Then print these values as 2 space-separated integers.

        SELECT salary * months AS earnings, COUNT(*) AS num_employees FROM employee GROUP BY earnings ORDER BY earnings DESC LIMIT 1;

8. Query the following two values from the STATION table: 1) The sum of all values in LAT_N rounded to a scale of  decimal places. 2) The sum of all 
values in LONG_W rounded to a scale of  decimal places.

            SELECT ROUND(SUM(LAT_N),2) AS lat, ROUND(SUM(LONG_W),2) AS lan from STATION;


9. Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880  and less than 137.2345. Truncate your answer to 
decimal places.

                    SELECT TRUNCATE(SUM(LAT_N), 4) AS truncated_LAT from station WHERE LAT_N >38.7880 AND LAT_N < 137.2345;


10. Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 
decimal places

            SELECT ROUND(LONG_W, 4) from STATION WHERE LAT_N <137.2345 ORDER BY LAT_N DESC LIMIT 1;


11. Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N)
and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION. Query the Euclidean Distance between points P1 and P2  
and format your answer to display 4 decimal digits.

            SELECT ROUND(SQRT(POWER(MIN(LAT_N)-MAX(LAT_N), 2) + POWER(MIN(LONG_W)-MAX(LONG_W),2)),4) from STATION



























